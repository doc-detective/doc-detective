name: Build and publish Electron bundles

on:
  push:
    branches: [ "main" ]
  pull_request:
      types: [opened, reopened, synchronize, review_requested]
  workflow_dispatch:

env:
  PUBLISH_FOR_PULL_REQUEST: true

jobs:
  publish:
    name: Build and Publish Electron bundle
    permissions: write-all
    runs-on: macos-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      
      - name: Set up Node
        uses: actions/setup-node@v3

      - name: Install dependencies
        run: cd electron && npm i

      - name: Get package version
        run: echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV
        
      - name: Remove all assets from the release with name containing v${{ env.VERSION }}
        run: |
          # Fetch all releases
          RELEASES=$(curl --silent --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                   --header "Accept: application/vnd.github.v3+json" \
                   https://api.github.com/repos/$GITHUB_REPOSITORY/releases)
  
          # Filter release by name and get its ID
          RELEASE_ID=$(echo "$RELEASES" | jq '.[] | select(.name | contains("v${{ env.VERSION }}")) | .id')
  
          # Exit if the release is not found
          if [ -z "$RELEASE_ID" ]; then
            echo "Release with name containing v${{ env.VERSION }} not found."
            exit 0
          fi
  
          # Fetch assets for the release
          ASSETS=$(curl --silent --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  --header "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID/assets | \
                  jq '.[] | .id')
  
          # Loop through each asset and delete it
          for ASSET_ID in $ASSETS; do
            curl -X DELETE \
            --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            --header "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/releases/assets/$ASSET_ID
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Build Electron bundles (macOS)
        run: cd electron && npm run build -- -m --x64 --arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron bundles (Windows)
        run: cd electron && npm run build -- -w -x64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron bundles (Linux)
        run: cd electron && npm run build -- -l --x64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}          
