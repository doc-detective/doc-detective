name: Update doc-detective-core version

on:
  repository_dispatch:
    types:
      - update-core-package-event
  workflow_dispatch:
    inputs:
      version:
        description: 'The doc-detective-core version.'
        required: false
        default: 'latest'

jobs:
  update:
    timeout-minutes: 10
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.DD_DEP_UPDATE_TOKEN }}

    - name: Set version variable
      id: version
      run: |
        VERSION="${{ github.event.client_payload.version || github.event.inputs.version || 'latest' }}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Get version of doc-detective-common from core
      id: common_version
      run: |
        COMMON_VERSION=$(npm view doc-detective-core@${{ steps.version.outputs.version }} dependencies --json | jq -r '.["doc-detective-common"]')
        echo "common_version=$COMMON_VERSION" >> $GITHUB_OUTPUT

    - name: Install specific versions of doc-detective-core and doc-detective-common
      run: |
        npm install doc-detective-core@${{ steps.version.outputs.version }} doc-detective-common@${{ steps.common_version.outputs.common_version }} || {
          echo "Failed to install doc-detective-core@${{ steps.version.outputs.version }} or doc-detective-common@${{ steps.common_version.outputs.common_version }}"
          exit 1
        }
    
    - name: Test the installation
      run: |
        npm test
    
    - name: Stage changes
      id: stage
      run: |
        git add package.json package-lock.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Bump or sync version
      id: patch
      if: steps.stage.outputs.has_changes == 'true'
      run: |
        node scripts/bump-sync-version-core.js
        version=$(node -p 'require("./package.json").version') && echo "version=$version" >> $GITHUB_OUTPUT

    - name: Install GitHub CLI
      if: steps.stage.outputs.has_changes == 'true'
      # Install GitHub CLI for fetching PRs and release notes
      run: |
        sudo apt-get update && sudo apt-get install -y gh jq

    - name: Gather merged PRs since last release
      id: merged_prs
      run: |
        # Get previous tag (before the new one)
        PREV_TAG=$(git tag --sort=-creatordate | grep -v "v${{ steps.patch.outputs.version }}" | head -n1)
        CURR_TAG="v${{ steps.patch.outputs.version }}"
        echo "Previous tag: $PREV_TAG, Current tag: $CURR_TAG"
        if [ -z "$PREV_TAG" ]; then
          echo "No previous tag found. Skipping PR list."
          echo "prs=No previous release found." >> $GITHUB_OUTPUT
        else
          PRS=$(gh pr list --state merged --search "merged:>=$(git log -1 --format=%aI $PREV_TAG)" --json number,title,url --jq '.[] | "- [#\(.number)](\(.url)): \(.title)"')
          if [ -z "$PRS" ]; then
            PRS=""
          fi
          echo "prs<<EOF" >> $GITHUB_OUTPUT
          echo "$PRS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.DD_DEP_UPDATE_TOKEN }}

    - name: Fetch doc-detective-core release notes
      id: CORE_release
      run: |
        CORE_VERSION=${{ steps.version.outputs.version }}
        # Remove ^ or ~ if present
        CORE_VERSION_CLEAN=$(echo "$CORE_VERSION" | sed 's/^[^0-9]*//')
        # Query GitHub API for release notes
        RELEASE_INFO=$(gh release view "v$CORE_VERSION_CLEAN" --repo doc-detective/doc-detective-core --json body --jq .body || echo "No release notes found.")
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_INFO" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.DD_DEP_UPDATE_TOKEN }}

    - name: Create release with detailed notes
      if: steps.stage.outputs.has_changes == 'true'
      uses: softprops/action-gh-release@v2
      with:
        body: |
          # What's new

          - Updated doc-detective-core to v${{ steps.patch.outputs.version }}:

            ${{ steps.CORE_release.outputs.release_notes }}

          ${{ steps.merged_prs.outputs.prs }}
        tag_name: "v${{ steps.patch.outputs.version }}"
        name: "v${{ steps.patch.outputs.version }}"
        generate_release_notes: false
        token: ${{ secrets.DD_DEP_UPDATE_TOKEN }}

